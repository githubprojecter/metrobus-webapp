// ---------------------- GENERADOR DE CLIENTE ----------------------
generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

// ---------------------- CONEXIÓN A LA BASE DE DATOS ----------------------
datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

// ---------------------- ENUMERACIÓN DE ROLES ----------------------
enum Role {
  Coordinador
  Operador
  Supervisor
  Dirección
  Patio
}

// ---------------------- MODELO GENERAL DE USUARIOS ----------------------
model UserRole {
  id         Int    @id @default(autoincrement())
  idFirebase String @unique
  role       Role

  nombre          String?
  apellidoPaterno String?
  apellidoMaterno String?
  profilePhotoUrl String?
  telefono        String?
  correo          String?

  operador    Operador?
  supervisor  Supervisor?
  patio       Patio?
  coordinador Coordinador?

  DeviceToken DeviceToken[]
}

// ---------------------- MODELO DE OPERADOR ----------------------
model Operador {
  id             Int     @id @default(autoincrement())
  userRoleId     Int     @unique
  unidadAsignada String?
  rutaAsignada   String?

  user                 UserRole               @relation(fields: [userRoleId], references: [id])
  botonesPanico        BotonPanico[]
  RegistroSalidaUnidad RegistroSalidaUnidad[]
  AsignacionUnidad     AsignacionUnidad[]
}

// ---------------------- BOTÓN DE PÁNICO ----------------------
model BotonPanico {
  id         Int      @id @default(autoincrement())
  operadorId Int
  timestamp  DateTime @default(now())
  motivo     String?
  atendido   Boolean  @default(false)
  latitud    Float?
  longitud   Float?

  operador          Operador            @relation(fields: [operadorId], references: [id])
  IncidenteAsignado IncidenteAsignado[]
}

// ---------------------- MODELO DE SUPERVISOR ----------------------
model Supervisor {
  id         Int @id @default(autoincrement())
  userRoleId Int @unique
  codigo     String?

  user            UserRole              @relation(fields: [userRoleId], references: [id])
  ubicaciones     UbicacionSupervisor[]
  reportes        ReporteIncidente[]
  asignaciones    IncidenteAsignado[]
  TurnoProgramado TurnoProgramado[]
  Presente        Presente[]
}

// ---------------------- RASTREO DE UBICACIÓN DE SUPERVISOR ----------------------
model UbicacionSupervisor {
  id           Int      @id @default(autoincrement())
  supervisorId Int
  timestamp    DateTime @default(now())
  latitud      Float
  longitud     Float

  supervisor Supervisor @relation(fields: [supervisorId], references: [id])
}

// ---------------------- MODELO DE COORDINADOR ----------------------
model Coordinador {
  id         Int @id @default(autoincrement())
  userRoleId Int @unique

  user            UserRole          @relation(fields: [userRoleId], references: [id])
  TurnoProgramado TurnoProgramado[]
  ReportenseCall  ReportenseCall[]
}

// ---------------------- RELACIÓN: INCIDENTE ASIGNADO ----------------------
model IncidenteAsignado {
  id              Int      @id @default(autoincrement())
  supervisorId    Int
  fechaAsignacion DateTime @default(now())
  panicId         Int
  latitud         Float
  longitud        Float

  supervisor Supervisor        @relation(fields: [supervisorId], references: [id])
  panic      BotonPanico       @relation(fields: [panicId], references: [id])
  reporte    ReporteIncidente?
}

// ---------------------- REPORTE DE INCIDENTE ----------------------
model ReporteIncidente {
  id                  Int      @id @default(autoincrement())
  supervisorId        Int
  incidenteAsignadoId Int      @unique
  fecha               DateTime @default(now())
  estado              String?
  descripcion         String
  ambulancia          Boolean  @default(false)
  policia             Boolean  @default(false)
  heridos             Boolean

  supervisor        Supervisor        @relation(fields: [supervisorId], references: [id])
  incidenteAsignado IncidenteAsignado @relation(fields: [incidenteAsignadoId], references: [id])
  fotos             FotoIncidente[]
}

// ---------------------- FOTOS RELACIONADAS A INCIDENTE ----------------------
model FotoIncidente {
  id        Int      @id @default(autoincrement())
  reporteId Int
  url       String
  createdAt DateTime @default(now())

  reporte ReporteIncidente @relation(fields: [reporteId], references: [id])
}

// ---------------------- MODELO PATIO ----------------------
model Patio {
  id         Int @id @default(autoincrement())
  userRoleId Int @unique

  user            UserRole               @relation(fields: [userRoleId], references: [id])
  registrosSalida RegistroSalidaUnidad[]
  asignaciones    AsignacionUnidad[]
}

// ---------------------- REGISTRO DE SALIDA DE UNIDADES ----------------------
model RegistroSalidaUnidad {
  id          Int      @id @default(autoincrement())
  patioId     Int
  unidad      String
  operadorId  Int
  fechaSalida DateTime
  horaInicio  String
  vueltas     Int
  kmInicial   Int
  kmFinal     Int?
  condiciones String

  patio    Patio    @relation(fields: [patioId], references: [id])
  operador Operador @relation(fields: [operadorId], references: [id])
}

// ---------------------- ASIGNACIÓN DE UNIDAD A OPERADOR ----------------------
model AsignacionUnidad {
  id         Int      @id @default(autoincrement())
  patioId    Int
  operadorId Int
  unidad     String
  ruta       String
  fecha      DateTime @default(now())

  patio    Patio    @relation(fields: [patioId], references: [id])
  operador Operador @relation(fields: [operadorId], references: [id])
}

// ---------------------- TOKENS PARA NOTIFICACIONES PUSH ----------------------
model DeviceToken {
  id         Int      @id @default(autoincrement())
  token      String   @unique
  userRoleId Int
  createdAt  DateTime @default(now())

  userRole UserRole @relation(fields: [userRoleId], references: [id])
}

// ---------------------- ENUM TURNOS (5 bloques) ----------------------
enum Turno {
  T1  // 06:00–14:00
  T2  // 08:00–16:00
  T3  // 10:00–18:00
  T4  // 18:00–02:00
  T5  // 14:00–22:00
}

model TurnoProgramado {
  id            Int      @id @default(autoincrement())
  fecha         DateTime
  turno         Turno
  supervisorId  Int
  coordinadorId Int
  createdAt     DateTime @default(now())

  supervisor  Supervisor  @relation(fields: [supervisorId], references: [id])
  coordinador Coordinador @relation(fields: [coordinadorId], references: [id])

  @@unique([fecha, turno, supervisorId])
}

// ---------------------- LLAMADO "REPORTENSE" ----------------------
model ReportenseCall {
  id            Int        @id @default(autoincrement())
  coordinadorId Int
  turno         Turno
  createdAt     DateTime   @default(now())
  presentes     Presente[]

  coordinador Coordinador @relation(fields: [coordinadorId], references: [id])
}

model Presente {
  id           Int      @id @default(autoincrement())
  supervisorId Int
  callId       Int?
  timestamp    DateTime @default(now())
  latitud      Float
  longitud     Float

  supervisor Supervisor      @relation(fields: [supervisorId], references: [id])
  call       ReportenseCall? @relation(fields: [callId], references: [id])
}

/*
----------------------------------------------------------
DOCUMENTACIÓN GENERAL DE LA BASE DE DATOS
----------------------------------------------------------
Esta base de datos modela el ecosistema de operación del Metrobus CDMX
en relación con la gestión de incidentes, control de unidades y 
coordinación del personal en campo.

FUNCIONES PRINCIPALES:
1. Registro y administración de usuarios autenticados con Firebase,
   clasificados por rol: Coordinador, Operador, Supervisor, Patio, Dirección.
2. Gestión de eventos críticos como activación de botón de pánico por operadores.
3. Asignación de incidentes a supervisores y seguimiento de su resolución.
4. Registro de reportes con evidencia fotográfica.
5. Rastreo de ubicación de supervisores y control de asistencia.
6. Administración de turnos y convocatorias (Reportense).
7. Control logístico en patios: salidas de unidades, asignación de operadores y rutas.
8. Soporte para notificaciones push en tiempo real.

----------------------------------------------------------
COMENTARIO DEL LLM SOBRE EL CONTEXTO:
----------------------------------------------------------
Como modelo, esta BD está diseñada para integrarse con un backend
en Next.js que interactúa en tiempo real con una app móvil en Expo.
Cada entidad está orientada a un caso de uso específico del sistema
Metrobus:
- **UserRole** centraliza la identidad y separa responsabilidades
  en submodelos por rol para mantener integridad y claridad.
- Los módulos de **BotonPanico**, **IncidenteAsignado** y 
  **ReporteIncidente** constituyen el flujo completo de gestión 
  de incidentes.
- La geolocalización y reportes de presencia se manejan en 
  **UbicacionSupervisor** y **Presente**, optimizados para 
  operaciones en tiempo real sin saturar el historial.
- El control de patios se gestiona mediante **RegistroSalidaUnidad** 
  y **AsignacionUnidad** para mantener trazabilidad logística.
- **DeviceToken** habilita las notificaciones push, 
  asegurando comunicación inmediata entre roles.
En resumen, esta BD soporta un sistema 24/7 de monitoreo,
asignación y coordinación entre diferentes roles para
maximizar la eficiencia y seguridad en el transporte público.
*/
