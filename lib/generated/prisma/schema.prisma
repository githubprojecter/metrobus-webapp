generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

enum Role {
  Coordinador
  Operador
  Supervisor
  Direcci√≥n
  Patio
}

model UserRole {
  id         Int    @id @default(autoincrement())
  idFirebase String @unique
  role       Role

  nombre          String?
  apellidoPaterno String?
  apellidoMaterno String?
  profilePhotoUrl String?
  telefono        String?
  correo          String?

  operador    Operador?
  supervisor  Supervisor?
  patio       Patio?
  coordinador Coordinador?
}

model Operador {
  id             Int     @id @default(autoincrement())
  userRoleId     Int     @unique
  unidadAsignada String?
  rutaAsignada   String?

  user                 UserRole               @relation(fields: [userRoleId], references: [id])
  botonesPanico        BotonPanico[]
  RegistroSalidaUnidad RegistroSalidaUnidad[]
  AsignacionUnidad     AsignacionUnidad[]
}

model BotonPanico {
  id         Int      @id @default(autoincrement())
  operadorId Int
  timestamp  DateTime @default(now())
  motivo     String?
  atendido   Boolean  @default(false)
  latitud    Float?
  longitud   Float?

  operador Operador @relation(fields: [operadorId], references: [id])
}

model Supervisor {
  id         Int @id @default(autoincrement())
  userRoleId Int @unique

  user         UserRole              @relation(fields: [userRoleId], references: [id])
  ubicaciones  UbicacionSupervisor[]
  reportes     ReporteIncidente[]
  asignaciones IncidenteAsignado[]
}

model UbicacionSupervisor {
  id           Int      @id @default(autoincrement())
  supervisorId Int
  timestamp    DateTime @default(now())
  latitud      Float
  longitud     Float

  supervisor Supervisor @relation(fields: [supervisorId], references: [id])
}

model Coordinador {
  id         Int @id @default(autoincrement())
  userRoleId Int @unique

  user UserRole @relation(fields: [userRoleId], references: [id])
}

model IncidenteAsignado {
  id                 Int      @id @default(autoincrement())
  supervisorId       Int
  fechaAsignacion    DateTime @default(now())
  reporteIncidenteId Int

  supervisor Supervisor       @relation(fields: [supervisorId], references: [id])
  incidente  ReporteIncidente @relation(fields: [reporteIncidenteId], references: [id])
}

model ReporteIncidente {
  id           Int      @id @default(autoincrement())
  supervisorId Int
  fecha        DateTime @default(now())
  descripcion  String
  ambulancia   Boolean  @default(false)
  policia      Boolean  @default(false)
  heridos      Boolean

  fotos             FotoIncidente[]
  supervisor        Supervisor          @relation(fields: [supervisorId], references: [id])
  IncidenteAsignado IncidenteAsignado[]
}

model FotoIncidente {
  id        Int      @id @default(autoincrement())
  reporteId Int
  url       String
  createdAt DateTime @default(now())

  reporte ReporteIncidente @relation(fields: [reporteId], references: [id])
}

model Patio {
  id         Int @id @default(autoincrement())
  userRoleId Int @unique

  user            UserRole               @relation(fields: [userRoleId], references: [id])
  registrosSalida RegistroSalidaUnidad[]
  asignaciones    AsignacionUnidad[]
}

model RegistroSalidaUnidad {
  id          Int      @id @default(autoincrement())
  patioId     Int
  unidad      String
  operadorId  Int
  fechaSalida DateTime
  horaInicio  String
  vueltas     Int
  kmInicial   Int
  kmFinal     Int?
  condiciones String

  patio    Patio    @relation(fields: [patioId], references: [id])
  operador Operador @relation(fields: [operadorId], references: [id])
}

model AsignacionUnidad {
  id         Int      @id @default(autoincrement())
  patioId    Int
  operadorId Int
  unidad     String
  ruta       String
  fecha      DateTime @default(now())

  patio    Patio    @relation(fields: [patioId], references: [id])
  operador Operador @relation(fields: [operadorId], references: [id])
}
